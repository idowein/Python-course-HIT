# -*- coding: utf-8 -*-
"""Tuples.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZzU1hd5DmmzuRGizw3D3IwTzkpQ96l1

## Tuples

Like a list, tuples are an references array.
"""

array_0 = ['dana', 'moti']
array_1 = [array_0, '2', 3] # list
array_2 = (array_0, '2', 3) # tuple

print(array_1)
print(array_2)

array_0[0] = 'yosi' # ['yosi', 'moti']
array_0.append('yakir') # ['yosi', 'moti', 'yakir']


print(array_1)
print(array_2)

"""Unlike lists, tuples are not editable, **they are immutable**"""

array_1 = [1, '2', 3.] # list
array_2 = (1, '2', 3.) # tuple

print(array_1[0])
print(array_2[0])

array_1[0] = 5
array_2[0] = 5 # 'tuple' object does not support item assignment

def Func(b):
    b[0] = None

a = [1, 2, 3]
# a = (1, 2, 3)
Func(a)
print(a)

"""## Dictionaries

Unlike sequences, which are indexed by a range of numbers (list, str, etc), dictionaries are indexed by keys, which can be any **immutable** type (strings, numbers, tuple, etc)

`Dict = {key1:value1, key2:value2, key3:value3}`

`Dict[key] => value`
"""

per = {'name': 'dan','age':5, 'weight':3.2}
print(per['name'])

grades_dict = {"dana": 95,
               "moti": 100,
               "yosi": 90}

print(grades_dict)

print(grades_dict['yosi'])

a = (5, 7)

Dict = {5: 95,
        "moti": [10, 25, 69],
        a: 90}

print(Dict)

print(Dict['moti'])
print(Dict[5])
print(Dict[(5, 7)])

grades_dict = {"dana": 95,
               "moti": 100,
               "yosi": 90}

# grades_dict = {}

print(grades_dict)

grades_dict['yakir'] = 75

print(grades_dict)

grades_dict['yakir'] = 99

print(grades_dict)

name = 'yakir'
grad = grades_dict[name]
print(f'{name} grad is {grad}')

name = 'david'
grad = grades_dict[name]
print(f'{name} grad is {grad}')

def get(Dict, key, defult=None):
    if key not in Dict:
        value = defult
    else:
        value = Dict[key]

    return value

name = 'yakir'
grad = grades_dict.get(name, 60)
# grad = get(grades_dict, name, 100)
print(f'{name} grad is {grad}')

name = 'david'
grad = grades_dict.get(name, 60)
# grad = get(grades_dict, name, 100)
print(f'{name} grad is {grad}')

def setdefault(Dict, key, defult):
    if key not in Dict:
        Dict[key] = defult

    return Dict[key]

grades_dict = {"dana": 95,
               "moti": 100,
               "yosi": 90}

print(grades_dict)

name = 'yosi'
grad = grades_dict.setdefault(name, 60)
print(grad)

print(grades_dict)

name = 'david'
grad = grades_dict.setdefault(name, 60)
print(grad)
print(grades_dict)

for key in grades_dict.keys():
    print(key)

print(' ')
for value in grades_dict.values():
    print(value)

print(' ')
for k, v in zip(grades_dict.keys(), grades_dict.values()):
    print(k, v)

# grades_dict.items() = zip(grades_dict.keys(), grades_dict.values())
for k, v in grades_dict.items():
    print(k, v)

david_grad = grades_dict.pop('david')

grades_dict

"""## Sets"""

s = {1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 'ya', 'ya'}
print(s)

s.add(7)
print(s)
s.add(6)
print(s)
s.add(3)
print(s)

a = [1, 2, 3, 3, 5, 3, 4]
print(a)

b = set(a)
print(b)

c = list(b)
print(c)