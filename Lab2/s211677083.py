# -*- coding: utf-8 -*-
"""s211677083.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YD7sz2KM8B1FkAyk5Yqf0HsUhvMHOxYg

# Experiment 4 - Revised Markdown Examples

## Question 1

Create a function named 'Ex1', which asks for your name and age using `input()`. Calculate how many years are left until you reach the age of retirement (65 years) and determine the exact year of retirement.

At the end, the program should print the **exact** following format **(in multiple lines)**, for example:

- Your name is `Danny`.
- Your age is `27` years old.
- You will retire in `2062`.

Notes:
1. Make sure the printed format corresponds with the given example.
2. The `input()` function returns str object, so to change to it integer use `int()`.
3. Use the current year to determine the retirement year.
"""

#Exe 1 - answer here!
def Ex1():
    # Write your code here
    name = input("Please enter your name: ")
    age = int(input("Please enter your age: "))
    retirememnt_year = 2025 - age + 65
    print("Your name is {}".format(name))
    print("Your age is {}".format(age))
    print("You will retire in {}".format(retirememnt_year))

# Function Call - Test your function.
Ex1()

"""
## Question 2

Write the function `QuadRoots` that calculates solutions of a quadratic equation of the form:
\begin{align}ax^2+bx+c=0\end{align}


The function should receive three coefficients $a$, $b$ and $c$.

The formula for finding the roots:

\begin{align}
          x_{1,2} =\frac{-b\pm\sqrt{b^2-4ac} }{2a}
    \end{align}

There are special cases where there is one solution to the equation or there are no solutions at all:
*   $b^2-4ac<0$ : No solutions.
*   $b^2-4ac=0$ : One solution - $x=\frac{-b}{2a}$.
*   $b^2-4ac>0$ : Two solutions - the complete solution.

The function should return a **tuple** containing:
* One/Two real roots (if they exist).
* Or the message: 'There is no solution to the equation'.

**Note**: You can use the discriminant \( b^2 - 4ac \) to determine the nature of the roots.

> **Examples**:
1.   For $a=1, b=-6, c=1$ the function should return: `(5.82, 0.17)`.
2.   For $a=1, b=0, c=2$ the function should return: `("There is no solution to the equation",)`.
"""

def QuadraticRoots(a, b, c):
    # Write your code here
    discriminant = (pow(b, 2)-4*a*c)
    if (discriminant<0):
      solution = ("There is no solution to the equation")
    elif (discriminant == 0):
      solution = (-b/(2*a))
    else:
      x1 = (-b + pow(discriminant, 0.5))/(2*a)
      x2 = (-b - pow(discriminant, 0.5))/(2*a)
      solution = (x1, x2)
    return solution

result = QuadraticRoots(3, -1, 3) # Check your function call
print(result)

"""
## Question 3

Write the function `ListAverage` that receives:

1. A list of numbers (int or float).
2. \( num \) - an additional argument.

The function should return the average of all the list numbers that are less than \( num \).

If there are no such numbers (or if the list is empty) the function should return -1.

**Note**:
*   It can be assumed that the list contains only numbers (float/int).

**Example**:
For the list `A=[2.5, 3.5, 5.5, 7.5, 9.5]` and `num=6`, the function should return the average value of 3.8333333333333335 for numbers less than 6.
"""

def ListAverage(input_list, num):
    # Write your code here

    # Filter the numbers that are less than 'num'
    filtered_numbers = [x for x in input_list if x < num]

    # If there are no numbers less than 'num', return -1
    if not filtered_numbers:
        return -1

    # Calculate the average of the filtered numbers
    return sum(filtered_numbers) / len(filtered_numbers)

A=[2.5, 3.5, 5.5, 7.5, 9.5]
result = ListAverage(A, 6) # Check your function call
print(result)

"""
## Question 4

Write the function `SumEven` that receives:

1. A list of numbers (int).

The function should return the sum of all even numbers in the list.

**Example**:
1. For `A=[1, 2, 3, 4, 5, 6, 10]`, the return value should be: `22`
2. For `A=[11, 22, 33, 16, 8]`, the return value should be: `46`
"""

def SumEven(list_numbers):
    # Write your code here

    # Filter the even numbers and calculate their sum
    return sum(x for x in list_numbers if x % 2 == 0)

A=[11, 22, 33, 16, 8]
result = SumEven(A) # Check your function call
print(result)